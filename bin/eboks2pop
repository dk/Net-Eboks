#!perl
use strict;
use warnings;
use Getopt::Long;
use Socket;
use IO::Socket;
use IO::Lambda qw(:all get_frame set_frame);
use IO::Lambda::Socket qw(:all);
use Net::Eboks;

my %opt = (
	port  => 110,
	addr  => '0.0.0.0',
	debug => 0,
	help  => 0,
);

my $version = 0.01;

sub usage
{
	print <<USAGE;

$0

   --port      - listen on port, 110 by default
   --addr      - listen on address, 0.0.0.0 by default
   --debug     - debug on stderr
   --help 

USAGE
	exit 1;
}

GetOptions(\%opt,
	"port|p=i",
	"addr|a=s",
	"debug",
	"help|h",
) or usage;

$opt{help} and usage();

print "Listening on $opt{addr}:$opt{port}...\n";

my $conn_timeout = 30;
my $server = IO::Socket::INET-> new(
	Listen    => 5,
	LocalAddr => $opt{addr},
	LocalPort => $opt{port},
	Blocking  => 0,
	ReuseAddr => ($^O !~ /win32/i),
);
unless ($server) {
	my $err = $!;
	print STDERR <<ERR;
Cannot bind to socket: $! .
(Not running as root? Try an unprivileged port, -p 8110 for example)
ERR
	exit 1;
}

sub debug($)
{
	return unless $opt{debug};
	my $t = scalar localtime;
	warn "$t: $_[0]\n";
}

my $serv = lambda {
	context $server;
	accept {
		# incoming connection
		my $conn = shift;
		again;

		unless ( ref($conn)) {
			debug("accept() error:$conn") if !ref($conn);
			return;
		}
		$conn-> blocking(0);

       		my $hostname = inet_ntoa((sockaddr_in(getsockname($conn)))[1]);
		
		debug("[$hostname] connect");
		
		my $buf     = '';
		my $session = { hostname => $hostname };
		my $resp    = ok("POP3 server ready\x{a}");
		context writebuf, $conn, \$resp, length($resp), 0, $conn_timeout;
	tail {
		context readbuf, $conn, \$buf, qr/^([^\r\n]*)[\r\n]+/s, $conn_timeout;
	tail {
		my @frame = get_frame;
		my ( $match, $error) = @_;
		unless ( defined($match)) {
			debug("[$hostname] session error: $error");
			undef @frame; # circular refs!
			return close($conn);
		}
		substr( $buf, 0, length($match)) = '';
		my $resp = handle( $match, $session);
		context ref($resp) ? $resp : lambda {};
	tail {
		$resp = shift if ref $resp;
		$resp .= "\x{a}";
		context writebuf, $conn, \$resp, length($resp), 0, $conn_timeout;
	tail {
		if ($session->{quit}) {
			debug("[$hostname] QUIT");
			undef @frame; # circular refs!
			close($conn);
		} else {
			set_frame(@frame);
			again;
		}
	}}}}}
};

sub fail($) { "-ERR $_[0]" }
sub ok($) { "+OK $_[0]" }
sub multi
{
	my @msgs;
	my $comment = shift;
	for ( @_ ) {
		my $p = $_;
		$p .= ' ' if $p eq '.';
		push @msgs, $p;
	}
	return ok(join("\x{a}", $comment, @msgs, '.'));
}

sub remotefail($)
{
	debug($_[0]);
	fail("e-boks.dk says: $_[0]");
}

sub list_share
{
	my ($session, $share) = (shift, shift);
	return lambda {
		context $session->{obj}->fetch_request( $session->{obj}->folders($share) );
	tail {
		my ( $folders, $error ) = @_;
		$session->{error} = $error;
		return 0 unless $folders;

		$session->{folder} = $folders->{Inbox};
		context $session->{obj}->list_all_messages($share, $session->{folder}->{id});
	tail {
		my ( $list, $error ) = @_;
		unless ($list) {
			$session->{error} = $error;
			return 0;
		}

		$session->{msgs} += scalar keys %$list;
		push @{$session->{keys}}, map { $list->{$_} } sort keys %$list;
		return 1;
	}}};
}

sub want_list
{
	my $session = shift;
	return lambda {
		return 1 if $session->{list};

		$session->{keys} = [];
		$session->{msgs} = 0;
		if ( $session->{all_shares}) {
			context $session->{obj}->fetch_request( $session->{obj}->shares );
		} else {
			context lambda {};
		}
	tail {
		my ( $shares, $error ) = @_;
		my @shares = ($session->{share});
		if ( $session->{all_shares}) {
			$session->{error} = $error;
			return 0 unless $shares;
			for my $k ( %$shares ) {
				next if $k eq 'name';
				next unless defined $shares->{$k}->{userId};
				push @shares, $shares->{$k}->{userId};
			}
			@shares = sort @shares;
		}

		context list_share( $session, shift @shares );
	tail {
		return 0 unless shift;
		return $session->{list} = 1 unless @shares;
		context list_share( $session, shift @shares );
		again;
	}}};
}

sub pop3_capa
{
	multi("my caps", 
		"USER", "UIDL", "TOP", 
		"EXPIRE $conn_timeout", "IMPLEMENTATION Shlemazle-Plotz-v$Net::Eboks::VERSION/$version"
	)
}

sub pop3_user
{
	my ($session, $user) = @_;
	return fail("already authorized") if exists $session->{user};
	return fail("bad username: must be CPR, f.ex. 205674-5675[:SHARE]") 
		unless ($user//'') =~ /^(\d{6})\-?(\d{4})(?::(\d+|\*))?$/;
	$session->{user} = $1 . $2;
	if (($3 // '') eq '*') {
		$session->{all_shares} = 1;
	} else {
		$session->{share} = $3;
	}
	return ok("hello");
}

sub pop3_pass
{
	my ($session, $pass) = @_;
	return fail("already authorized") if exists $session->{pass};
	$session->{pass} = $pass;

	my %creds = (
		cpr        => $session->{user},
		password   => $session->{pass},
		home       => $opt{keys},
	);
	$creds{share_id} = $session->{share} if defined $session->{share};
	$session->{obj}  = Net::Eboks->new(%creds);
	$session->{share} //= $session->{obj}->{share_id};
	return lambda {
		debug("[$session->{hostname}] login");
		context $session->{obj}->fetch_request($session->{obj}->login_nemid);
	tail {
		my ( $uname, $error ) = @_;
		debug("[$session->{hostname}] $error") if $error;
		return remotefail($error) unless defined $uname;
		$session->{authorized} = 1;
		debug("[$session->{hostname}] authorized");
		return ok("Welcome $uname");
	}};
}

sub pop3_quit
{
	my ($session) = @_;
	$session->{quit} = 1;
	return ok("bye");
}

sub pop3_stat
{
	my ($session) = @_;
	return fail("not authorized") unless $session->{authorized};
	return lambda {
		context want_list($session);
		tail {
			return remotefail($session->{error}) unless shift;
			my $sum = 0;
			$sum += $_->{size} for @{ $session->{keys} };
			return ok($session->{msgs} . ' ' . $sum);
		}
	};
}

sub pop3_list
{
	my ($session, $id) = @_;
	return fail("not authorized") unless $session->{authorized};
	return lambda {
		context want_list($session);
	tail { 
		return remotefail($session->{error}) unless shift;
		if ( defined $id) {
			return fail("bad command") unless $id =~ /^\d+$/;
			return fail("no such msg") if $id <= 0 || $id > $session->{msgs};
			return ok($id . ' '. $session->{keys}->[$id-1]->{size});
		} else {
			return multi( "$session->{msgs} messages", 
				(map { "$_ " . $session->{keys}->[$_-1]->{size} } (1..$session->{msgs})));
		}
	}}
}

sub pop3_uidl
{
	my ($session, $id) = @_;
	return fail("not authorized") unless $session->{authorized};
	return lambda {
		context want_list($session);
	tail { 
		return remotefail($session->{error}) unless shift;
		if ( defined $id) {
			return fail("bad command") unless $id =~ /^\d+$/;
			return fail("no such msg") if $id <= 0 || $id > $session->{msgs};
			return ok($id . ' '. $session->{keys}->[$id-1]->{id});
		} else {
			return multi( "$session->{msgs} messages", 
				(map { "$_ " . $session->{keys}->[$_-1]->{id} } (1..$session->{msgs})));
		}
	}}
}

sub pop3_noop { ok('') }
sub pop3_dele { ok("not deleted, actually") }
sub pop3_rset { fail("not implemented") }
sub pop3_apop { fail("not implemented") }

sub pop3_retr
{
	my ( $session, $id ) = @_;
	return fail("bad argument") unless defined($id) && $id =~ /^\d+$/ && $id > 0;

	lambda {
		context want_list($session);
	tail {
		return remotefail($session->{error}) unless shift;
		return fail("bad argument") if $id > $session->{msgs};
		context $session->{obj}->fetch_message_and_attachments( $session->{keys}->[$id - 1] );
	tail {
		my $msg = shift;
		return remotefail(shift) unless $msg;
		$msg = $session->{obj}->assemble_mail(%$msg);
		return multi('message follows', split("\n", $msg));
	}}}
}

sub pop3_top
{
	my ( $session, $id, $lines ) = @_;
	return fail("bad argument") unless defined($id) && $id =~ /^\d+$/ && $id > 0 && defined($lines) && $lines =~ /^\d+$/ && $lines > 0;

	lambda {
		context want_list($session);
	tail {
		return remotefail(shift) unless shift;
		return fail("bad argument") if $id > $session->{msgs};
		context $session->{obj}->fetch_message_and_attachments( $session->{keys}->[$id - 1] );
	tail {
		my $msg = shift;
		return remotefail($session->{error}) unless $msg;
		$msg = $session->{obj}->assemble_mail(%$msg);
		my @lines = split("\n", $msg);
		splice(@lines, $lines);
		return multi('top of message follows', @lines);
	}}}
}

sub pop3__terminate { exit }

sub handle
{
	my ( $cmd, $session ) = @_;

	chomp $cmd;
	$cmd =~ s/^\s*//;
	$cmd =~ s/\s*$//;
	my @cmd = split(' ', $cmd);
	$cmd[0] //= '';
	$cmd[0] = uc $cmd[0];
	
	debug("[$session->{hostname}] @cmd") unless $cmd[0] =~ /^(USER|PASS)$/;

	my $msgs = 2;

	my $can = __PACKAGE__->can("pop3_\L$cmd[0]");
	return fail("bad command") unless $can;
	shift @cmd;
	return $can->($session, @cmd);
}

$serv-> wait;
