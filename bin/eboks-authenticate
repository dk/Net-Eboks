#!perl
use strict;
use warnings;
use Net::Eboks;
use IO::Lambda qw(:all);
use IO::Lambda::HTTP::Client qw(http_request);
use IO::Lambda::HTTP::Server;
use URI;
use URI::QueryParam;
use HTTP::Request;
use HTTP::Response;

my $port = 9999;
my ($server, $error, $e);

my $win32_install = (( $ARGV[0] // '' ) eq '--win32-install');

sub mailcheck { $win32_install ?  '<p><a href="/testmail">Skip to mail check</a>' : '' }
sub quit      { '<p><a href="/abort">Quit the wizard</a><p>' }
sub main      { '<p><a href="/">Main menu</a><p>' }

sub html($)
{
	my $html = $_[0];
	$html = "<html><body>$html</body></html>";
	HTTP::Response->new( 200, "OK", [
		'Content-Type'   => 'text/html',
		'Content-Length' => length($html),
	], $html)
}

sub pop3
{
	return IO::Socket::INET-> new(
		PeerAddr => '127.0.0.1',
		PeerPort => 8110,
		Proto    => 'tcp',
	);
}

sub h2($)      { html "<h2>$_[0]</h2>" . main . quit }
sub h2x($$)    { html "<h2>$_[0]</h2><p>$_[1]" . main . quit } 
sub error($)   { h2x( 'Error', $_[0] ) }

my %routes;
%routes = (
	'/win32_install' => sub { html <<'WIN32_INSTALL' . quit
<h2>Welcome to the Eboks/Nemid installation wizard</h2><p>
First you need to install a POP3 proxy that will start with Windows.<p>
<form action="/win32_install_do" method="POST">
<input type="submit" name="install" value="Install">
<input type="submit" name="remove" value="Remove">
<input type="submit" name="check" value="Check">
</form>
<p><a href="/auth">Skip to eBoks authentication</a><p>
WIN32_INSTALL
	},

	'/win32_install_do' => sub {
		my $req = shift;
		return (undef, "bad response") unless $req->method eq 'POST';
		if ( $req->content =~ /^install/) {
			my $resp = `eboks-install-win32 install 2>&1`;
			return error "Something wrong happened:<p><pre>$resp</pre>" unless $resp =~ /LOOKS OKAY/;
			system "eboks-install-win32 start";
			my $pop3 = pop3;
			return error 'Proxy installed but not started, please start manually or wait and recheck' unless $pop3;
			return h2x 'Proxy installed okay', '<a href="/auth">Continue to eBoks authentication</a>';
		} elsif ( $req->content =~ /^remove/) {
			system "eboks-install-win32 stop";
			system "eboks-install-win32 remove";
			return h2 'POP3 proxy removed';
		} elsif ( $req->content =~ /^check/) {
			return pop3 ? h2 'Running okay' : error 'Not running';
		} else {
			return $routes{'/'}->();
		}
	},

	'/auth' => sub { html <<'INIT' . ($win32_install ? main : '') . quit;
<h2>Welcome to the Eboks/Nemid authenticator</h2>
<p>
This step is needed to bind a device, usually a mobile phone, to
Eboks.<br> You can see a list of those devices in your E-boks personal page.<br>
Here we register a fake device "Net-Eboks" that establishes access for
the module.
<p>
First, you will need to provide your CPR and mobile login:
<form action="/step1" method="POST">
<table><tr>
<td>CPR:</td><td><input name="cpr"></td></tr><tr>
<td>Mobile login:</td><td><input type="password" name="login"></td></tr>
</table><p>
<input type="submit" value="Next">
</form>
INIT
	},

	'/step1' => sub {
		my $req = shift;
		return (undef, "bad response") unless 
			$req->method eq 'POST' and
			$req->header('Content-Type') eq 'application/x-www-form-urlencoded';
		my $uri = URI->new;
		$uri->query($req->content);
		$e = Net::Eboks->new(
			cpr        => $uri->query_param('cpr') // '',
			password   => $uri->query_param('login') // ''
		);
		my ($uname, $error) = $e->fetch_request($e->login)->wait;
		return error "Error logging to E-Boks:$error" if defined $error;
		return html <<SUCCESS . mailcheck . main . quit;
<h2>Welcome, $uname!</h2>
<p>
The login to E-Boks was successful.<br>
Now, it requires you to perform a NemID login, to get a confirmation
that the device is, indeed yours.<br> On the next page you will be presented
the standard NemID dialog, that you need to login as you usually do.<br>
If you are going to authorize the login with your NemID app, make sure that
the requestor is "E-Boks login".
<form action="/step2" method="POST">
<input type="submit" value="Next">
</form>
SUCCESS
	},

	'/step2' => sub {
		return error 'Not logged in' unless $e;
		IO::Lambda::HTTP::Client->new( HTTP::Request->new(
			GET => 'https://m.e-boks.dk/app/logon.aspx?logontype=nemid'
		), keep_alive => 1)
	},

	'/nemid/Logon/LogonPrivate' => sub {
		my $req = shift;
		return error 'Not logged in' unless $e;
		$req->uri("https://logon.e-boks.dk/".$req->uri);
		$req->header( Host => 'logon.e-boks.dk');
		$req->header( 'Accept-Encoding' => 'identity');
		my $resp = IO::Lambda::HTTP::Client->new( $req)->wait;
		return $resp unless $resp->is_success;
		return error "Cannot get NemID ticket" unless $resp->content =~ /name="Ticket" value="(.*?)"/;
		my ( undef, $error) = $e->fetch_request($e->session_activate($1))->wait;
		return error "Cannot activate device: $error" if defined $error;
		$server->shutdown;
		return h2x('Device is activated!', 'Now you can use the module with your credentials.' . mailcheck);
	},

	'/testmail' => sub {
		return error 'Not logged in' unless $e;
		my ($folders, $error) = $e->fetch_request( $e->folders )->wait;
		return error $error unless $folders;
		$server->shutdown;
		return html '<h2>All okay</h2><p>'.
			'These are your e-Boks mail folders, retrieved from the remote server:<p>'.
			join('<br>', map { "<i>$_</i>" } sort keys %$folders) . '<p>'.
			'Looks like you have it up and running. You may close the page now';
	},

	'/abort' => sub {
		$server->shutdown;
		return html '<h2>Installation aborted</h2>';
	},
);

$routes{'/'} = $win32_install ? $routes{'/win32_install'} : $routes{'/auth'};

($server, $error) = http_server {
	my $req = shift;
	if ( my $cb = $routes{$req->uri}) {
		return $cb->($req);
	} else {
		my $msg = "Something wrong happened, ".$req->uri. " is not supposed to be accessed";
		return HTTP::Response->new( 404, "Not Found", ['Content-Length' => length($msg)], $msg);
	}
} "localhost:$port", timeout => 10;
die $error unless $server;

if ( $win32_install ) {
	require Win32API::File;
	import Win32API::File qw(GetOsFHandle SetHandleInformation HANDLE_FLAG_INHERIT);
	warn $^E unless SetHandleInformation(GetOsFHandle($server->{socket}), HANDLE_FLAG_INHERIT(), 0);
}

print "\n";
print "** WARNING: NemID is deprecated, this wouldn't work! ***\n";
print "**              Use eboks-auth-mitid instead         ***\n";
print "\n";
print "Open a browser and go to this address:\n";
print "\n   http://localhost:$port/\n\n";
$server->wait;
